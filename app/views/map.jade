extends ./layouts/default

block content
  .row
    h4 Descripcion del mapa
    center
      svg
    p Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras libero lorem, sagittis id quam eu, aliquet vehicula purus. Nulla facilisi. Maecenas sed sapien vitae urna aliquet gravida ac a neque. Nulla quis ipsum nec sem placerat sodales. Fusce sed purus a velit mattis euismod. Duis blandit nisi id eros euismod, vel pellentesque mi lacinia. Fusce nisl sem, dictum vel hendrerit vel, gravida a est. Ut aliquam at erat in consectetur. Vivamus sagittis sapien vel imperdiet egestas. Duis interdum nisl eu arcu consectetur ullamcorper. Nam vel vehicula nunc. Fusce commodo molestie varius. Maecenas et tortor gravida, posuere erat eu, blandit quam. Aenean in blandit urna. Ut est sem, pharetra vitae enim ac, vestibulum iaculis purus. Suspendisse quis nisi ipsum.

append stylesheet
  style(type='text/css').
    body {
      //- background-color:#fff7e8;
    }

    .states {
      fill: #222;
    }

    .states :hover {
      fill: orange;
    }

    .state-boundary {
      fill: none;
      stroke: #EEE;
      pointer-events: none;
    }

    .map-border {
      fill: none;
      stroke: #fff;
    }

    .state-border {
      fill: none;
      stroke: #BBB;
    }

    svg {
      background-color: #FFF;
      border: 1px solid #DEDEDE;
    }

append javascript
  script(type='text/javascript', src='/vendor/d3/d3.js')
  script(type='text/javascript', src='/vendor/topojson/topojson.js')
  script(type="text/javascript").
    var width = 800,
        height = 500;

    var mx = !{JSON.stringify(mapRaw).replace(/<\//g, "<\\/")};
    var total = "#{total}"

    var color = d3.scale.log()
      .range(["hsl(62,100%,90%)", "hsl(228,30%,20%)"])
      .interpolate(d3.interpolateHcl);

    var projection = d3.geo.conicConformal()
      .rotate([102, 0])
      .center([0, 24])
      .parallels([17.5, 29.5])
      .scale(1400)
      .translate([width / 2, height / 2]);


    var path = d3.geo.path()
      .projection(projection);

    var svg = d3.select("svg")
      .attr("width", width)
      .attr("height", height);

    var counties = topojson.feature(mx, mx.objects.states).features;
    var densities = counties
      .map(function(d) { return d.properties.density = d.properties.value * 100 / total})
      .sort(function(a, b) { return a - b; });

    color.domain([d3.quantile(densities, .01), d3.quantile(densities, .99)]);

    svg.append("g")
        .attr("class", "states")
      .selectAll("path")
        .data(topojson.feature(mx, mx.objects.states).features)
      .enter().append("path")
        .attr("d", path)
        .style("fill", function(d) {
          console.log(d.properties.density)
          return color(d.properties.density);
        })
      .append("title")
        .text(function(d) { return d.properties.name; });

    svg.append("path")
      .datum(topojson.mesh(mx, mx.objects.states, function(a, b) { return a.properties.state_code !== b.properties.state_code; }))
      .attr("class", "state-boundary")
      .attr("d", path);

    svg.append("path")
      .datum(topojson.mesh(mx, mx.objects.states, function(a, b) { return a !== b; }))
      .attr("class", "map-border")
      .attr("d", path);

    svg.append("path")
      .datum(topojson.mesh(mx, mx.objects.states, function(a, b) { return a === b; }))
      .attr("class", "state-border")
      .attr("d", path);


